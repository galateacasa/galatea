{
  "name": "inflection-extended",
  "version": "0.0.2",
  "description": "Inflection string extensions",
  "main": "index.js",
  "scripts": {
    "test": "it -r dot"
  },
  "repository": {
    "type": "git",
    "url": "git:git@github.com:doug-martin/inflect-extended.git"
  },
  "keywords": [
    "String",
    "extender",
    "utilities"
  ],
  "testling": {
    "files": "test/browserling.js",
    "browsers": [
      "ie/8..latest",
      "chrome/20..latest",
      "firefox/14..latest",
      "safari/latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "grunt": "~0.4.1",
    "arguments-extended": "0.0.1",
    "array-extended": "0.0.5"
  },
  "devDependencies": {
    "it": "~0.2.0",
    "grunt-it": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-jshint": "~0.4.3"
  },
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/inflection-extended.png?branch=master)](https://travis-ci.org/doug-martin/inflection-extended)\n\n[![browser support](https://ci.testling.com/doug-martin/inflection-extended.png)](http://ci.testling.com/doug-martin/inflection-extended)\n\n# inflection-extended\n\n`inflection-extended` is a Javascript library that can contains different inflection functions.\n\n`inflection-extended` can be used as a monad library that be be incorporated into [`extended`](https://github.com/doug-martin/extended) or used standalone.\n\n```javascript\nvar inflect = require(\"inflection-extended\");\n\ninflect.camelize(\"hello_world\");  //helloWorld\n```\n\nOr\n\n```javascript\nvar myextended = require(\"extended\")\n\t.register(require(\"inflection-extended\"));\n\nmyExtended.camelize(\"hello_world\");  //helloWorld\n```\n\n## Installation\n\n```\nnpm install inflection-extended\n```\n\nOr [download the source](https://raw.github.com/doug-martin/inflection-extended/master/index.js) ([minified](https://raw.github.com/doug-martin/inflection-extended/master/inflection-extended.min.js))\n\n## Usage\n\n**`camelize`**\n\nConverts a underscored string to camelcase\n\n```javascript\n//as a function\ninflect.camelize(\"hello_world\");  //helloWorld\ninflect.camelize(\"column_name\"); //columnName\ninflect.camelize(\"columnName\"); //columnName\ninflect.camelize(null); //null\ninflect.camelize(); //undefined\n\n//as a monad\ninflect(\"hello_world\").camelize().value();  //helloWorld\ninflect(\"column_name\").camelize().value(); //columnName\ninflect(\"columnName\").camelize().value(); //columnName\n```\n\n**`underscore`**\n\nConverts a camelcase string to the underscored string. \n\n```javascript\n//as a function\ninflect.underscore(\"helloWorld\"); //hello_world\ninflect.underscore(\"column_name\"); //column_name\ninflect.underscore(\"columnName\"); //column_name\ninflect.underscore(null); //null\ninflect.underscore(); //undefined\n\n//as a monad\ninflect(\"helloWorld\").underscore().value(); //hello_world\ninflect(\"column_name\").underscore().value(); //column_name\ninflect(\"columnName\").underscore().value(); //column_name\n```\n\n**`classify`**\n\nSingularizes and camelizes a string.  Also strips out all characters preceding and including a period (\".\").\n\n```javascript\n//as a function\ninflect.classify(\"egg_and_hams\"); //eggAndHam\ninflect.classify(\"post\"); //post\ninflect.classify(\"schema.post\"); //post\n\n//as a monad\ninflect(\"egg_and_hams\").classify().value(); //eggAndHam\ninflect(\"post\").classify().value(); //post\ninflect(\"schema.post\").classify().value(); //post\n```  \n\n**`singularize`**\n\nThe reverse of pluralize, returns the singular form of a word.\n\n```javascript\n//as a function\ninflect.singularize(\"posts\"); //post\ninflect.singularize(\"octopi\"); //octopus\ninflect.singularize(\"sheep\"); //sheep\ninflect.singularize(\"word\"); //word\ninflect.singularize(\"the blue mailmen\"); //the blue mailman\ninflect.singularize(\"CamelOctopi\"); //CamelOctopus\n\n//as a monad\ninflect(\"posts\").singularize().value(); //post\ninflect(\"octopi\").singularize().value(); //octopus\ninflect(\"sheep\").singularize().value(); //sheep\ninflect(\"word\").singularize().value(); //word\ninflect(\"the blue mailmen\").singularize().value(); //the blue mailman\ninflect(\"CamelOctopi\").singularize().value(); //CamelOctopus\n``` \n\n**`pluralize`**\n\nReturns the plural form of the word.\n\n```javascript\n//as a function\ninflect.pluralize(\"post\"); //posts\ninflect.pluralize(\"octopus\"); //octopi\ninflect.pluralize(\"sheep\"); //sheep\ninflect.pluralize(\"words\"); //words\ninflect.pluralize(\"the blue mailman\"); //the blue mailmen\ninflect.pluralize(\"CamelOctopus\"); //CamelOctopi\n\n//as a monad\ninflect(\"post\").pluralize().value(); //posts\ninflect(\"octopus\").pluralize().value(); //octopi\ninflect(\"sheep\").pluralize().value(); //sheep\ninflect(\"words\").pluralize().value(); //words\ninflect(\"the blue mailman\").pluralize().value(); //the blue mailmen\ninflect(\"CamelOctopus\").pluralize().value(); //CamelOctopi\n```  \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/inflect-extended/issues"
  },
  "homepage": "https://github.com/doug-martin/inflect-extended",
  "_id": "inflection-extended@0.0.2",
  "dist": {
    "shasum": "2f30aa506e644072690b1882a6e676f9e94acdb5"
  },
  "_from": "inflection-extended@0.0.2",
  "_resolved": "http://registry.npmjs.org/inflection-extended/-/inflection-extended-0.0.2.tgz"
}

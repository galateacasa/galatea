/* global angular:false, document:false, window:false */
/**
* iDialog main module
*/
angular.module('idialog', [])
.run(['$templateCache', 'idialogWindowTpl', function($templateCache, idialogWindowTpl) {
    'use strict';

    $templateCache
        .put(idialogWindowTpl, '<div class="idialog idialog-animation ng-hide" ng-show="visible"><div class="close-btn" ng-click="hide()"></div><div class="w" ng-include="template" ng-init="startLoading()" onload="show()"></div></div>');
}])
.value('idialogWindowTpl', 'idialogWindowTpl')
.service('$idialog', ['$compile', '$timeout', '$rootScope', function($compile, $timeout, $rootScope) {
    'use strict';

    return function(template, options) {
            options = options || {};

            var $dialog = angular.element('<div idialog-window="'+template+'" class="'+(options['class'] || '')+'"></div>');
            angular.element(document.body).append($dialog);

            $timeout(function() {
                var newScope = $rootScope.$new(true);
                newScope.onOpen = options.onOpen || function() {};
                newScope.beforeOpen = options.beforeOpen || function() {};
                newScope.onClose = options.onClose || function() {};
                newScope.beforeClose = options.beforeClose || function() {};
                newScope.query = options.query || {};

                $compile($dialog)(newScope);
            });
        };
}])
.directive('idialog', ['$idialog', function($idialog) {
    'use strict';

    return {
        restrict: 'A',
        link: function($scope, $element, attrs) {
            $element.on('click', function(e) {
                e.preventDefault();

                if (!attrs.idialog) {
                    console.error('Try to show an empty idialog');
                    return;
                }

                $idialog(attrs.idialog, {'class': attrs.idialogClass});
            });
        }
    };
}])
.directive('idialogWindow', ['$timeout', '$compile', 'idialogWindowTpl', function($timeout, $compile, idialogWindowTpl) {
    'use strict';

    return {
        restrict: 'A',
        scope: true,
        templateUrl: idialogWindowTpl,
        replace: true,
        link: function($scope, $element, attrs) {
            $scope.visible = false;
            $scope.loading = false;
            $scope.closed = false;
            $scope.template = attrs.idialogWindow;

            angular.element(document).on('ready', $scope.relocate);
            angular.element(window).on('load', $scope.relocate);
            angular.element(window).on('resize', $scope.relocate);

            $timeout($scope.relocate, 100);

            $scope.$overlay = angular.element('<div class="idialog-overlay idialog-animation ng-hide" ng-show="visible || loading" ng-click="hide()"><s class="l idialog-animation ng-hide" ng-show="loading"></s></div>');
            angular.element(document.body).append($scope.$overlay);
            $compile($scope.$overlay)($scope);
        },
        controller: function($scope, $element, $location) {
            for (var prop in $scope.query) {
                if ($scope.query.hasOwnProperty(prop)) {
                    $location.search(prop, $scope.query[prop]);
                }
            }

            $scope.relocate = function() {
                var doc = document.documentElement, body = document.body;
                var top = (doc && doc.scrollTop || body && body.scrollTop || 0) + 15;
                top = parseInt(top, 10) + 'px';

                var left = document.body.clientWidth > 1000 ? -$element[0].clientWidth / 2 : -$element[0].clientWidth / 2 + 25;
                left = parseInt(left, 10) + 'px';

                $element.css({
                    position: 'absolute',
                    marginLeft: left,
                    marginTop: '0px',
                    top: top
                });
            };

            $scope.show = function() {
                $scope.visible = true;
                $scope.loading = false;
                $scope.relocate();
                $timeout($scope.relocate);
                $timeout($scope.relocate, 100);
            };

            $scope.hide = function() {
                $scope.visible = false;
                $scope.loading = false;
                $timeout(function() {
                    $scope.$overlay.remove();
                    $element.remove();
                }, 3000);
            };

            $scope.startLoading = function() {
                $timeout(function() {
                    if (!$scope.visible && !$scope.closed) {
                        $scope.loading = true;
                    }
                }, 300);
            };
        }
    };
}]);
